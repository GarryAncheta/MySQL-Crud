/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cs345.gui.project;

import static java.lang.Integer.parseInt;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author garry
 */
public class enrollmentPage extends javax.swing.JFrame {

    /**
     * Creates new form enrollmentPage
     */
    public enrollmentPage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        courseDropDown = new javax.swing.JComboBox<>();
        firstNameLabel = new javax.swing.JLabel();
        lastNameLabel = new javax.swing.JLabel();
        firstNameTextField = new javax.swing.JTextField();
        lastNameTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        studentIdTextField = new javax.swing.JTextField();
        enrollButton = new javax.swing.JButton();
        refreshCourseList = new javax.swing.JButton();
        Return = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        firstNameLabel.setText("First Name:");

        lastNameLabel.setText("Last Name:");

        jLabel1.setText("Student ID:");

        enrollButton.setText("Register");
        enrollButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enrollButtonActionPerformed(evt);
            }
        });

        refreshCourseList.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        refreshCourseList.setText("Refresh");
        refreshCourseList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshCourseListActionPerformed(evt);
            }
        });

        Return.setText("Return");
        Return.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReturnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lastNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lastNameTextField)
                            .addComponent(studentIdTextField)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(firstNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(refreshCourseList, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(firstNameTextField)
                            .addComponent(courseDropDown, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(enrollButton, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Return, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(courseDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshCourseList, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(firstNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lastNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lastNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(studentIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(enrollButton, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                    .addComponent(Return, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void enrollButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enrollButtonActionPerformed
        
        try 
        {
            Connection currConnection = getConnection();
            int studentId;
            int courseCapInt;
            int courseCountInt;
            int capAndCount[];
            
            if( studentIdTextField.getText().equals("") 
                || firstNameTextField.getText().equals("") 
                || lastNameTextField.getText().equals("") )
            {
                JOptionPane.showMessageDialog( this, "Please make sure to fill out the Student ID, First Name, and Last Name forms!" );
            }
            
            if( ( (String) courseDropDown.getSelectedItem() ).equals( "" ) )
            {
                JOptionPane.showMessageDialog( this, "You have not chosen a class to enroll in!" );
            }
            
            String courseChosen = (String) courseDropDown.getSelectedItem();
            studentId = parseInt( studentIdTextField.getText() );
            
            capAndCount = getCapAndCount( courseChosen );
            courseCapInt = capAndCount[ 0 ];
            courseCountInt = capAndCount[ 1 ];
            
            
            PreparedStatement getStudentQuery;
            
            ResultSet studentQuery;
            
            String getStudent = "SELECT * FROM student WHERE id = '" + studentId + "'";
            
            getStudentQuery = currConnection.prepareStatement( getStudent );
            
            studentQuery = getStudentQuery.executeQuery();
            
            if( studentQuery.next() )
            {
                if( courseCapInt == courseCountInt )
                {
                    putOnWaitlist( courseChosen, studentId );

                    JOptionPane.showMessageDialog( this, "This course is full, you have been placed at the waitlist." );
                }
                else
                {
                    enroll( courseChosen, studentId );
                    
                    JOptionPane.showMessageDialog( this, "You have been enrolled in "+ courseChosen + "!" );
                }
            }
            else
            {
                registerStudent();
                
                if( courseCapInt == courseCountInt )
                {
                    putOnWaitlist( courseChosen, studentId );
                    
                    JOptionPane.showMessageDialog( this, "This course is full, you have been placed at the waitlist." );
                }
                else
                {
                    enroll( courseChosen, studentId );
                    
                    JOptionPane.showMessageDialog( this, "You have been enrolled in "+ courseChosen + "!" );
                }
            }
        } 
        catch (Exception ex) 
        {
            Logger.getLogger(enrollmentPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_enrollButtonActionPerformed
    
    public int[] getCapAndCount( String courseName ) throws Exception
    {
        Connection currConnection = getConnection();
        PreparedStatement getCourseCap;
        ResultSet courseQuery;
        int result[] = new int[2];
        
        String getCap = "SELECT course.cap, course.student_count FROM course WHERE course.name = '" + courseName + "'";
        
        getCourseCap = currConnection.prepareStatement( getCap );
        
        courseQuery = getCourseCap.executeQuery();
        
        courseQuery.next();
        result[0] = parseInt( courseQuery.getString( 1 ) );
        result[1] = parseInt( courseQuery.getString( 2 ) );
        
        
        return result;
        
    }
    
    public void registerStudent() throws Exception
    {
        Connection currConnection = getConnection();
        
        String firstName = firstNameTextField.getText();
        String lastName = lastNameTextField.getText();
        int studentId = parseInt( studentIdTextField.getText() );
        
        PreparedStatement registerStudent;
        
        String registerQuery = "INSERT INTO student ( id, first_name, last_name ) VALUES ( " + studentId + ", '" + firstName + "', '" + lastName + "' )";
        
        registerStudent = currConnection.prepareStatement( registerQuery );
        
        registerStudent.executeUpdate();
        
    }
    
    public int getCourseId( String courseName ) throws Exception
    {
        Connection currConnection = getConnection();
        
        PreparedStatement getCourseId;
        
        String courseIdQuery = "SELECT id FROM course WHERE name = '" + courseName + "'";
        
        getCourseId = currConnection.prepareStatement( courseIdQuery );
        
        ResultSet courseId = getCourseId.executeQuery();
        
        if( courseId.next() )
        {
            return parseInt( courseId.getString( 1 ) );
        }
        
        return -1;
    }
    
    public boolean enroll( String courseName, int studentId ) throws Exception
    {
        Connection currConnection = getConnection();
        int courseId = getCourseId( courseName );
        
        PreparedStatement enrollment;
        
        int[] capAndCount = getCapAndCount( courseName );
        int count = capAndCount[ 1 ];
        
        if( count != capAndCount[ 0 ] )
        {
            String enrollQuery = "UPDATE course SET student_count = ? WHERE id = " + courseId;
        
            enrollment = currConnection.prepareStatement( enrollQuery );
            count++;
            enrollment.setInt(1, count );
            
            enrollment.executeUpdate();
            
            enrollQuery = "INSERT INTO bridge ( course_id, student_id ) VALUES ( " + courseId + ", " + studentId + " )";
            enrollment = currConnection.prepareStatement( enrollQuery );
            
            enrollment.executeUpdate();
        }
        
        return false;
    }
    
    public void putOnWaitlist( String courseName, int studentId ) throws Exception
    {
        Connection currConnection = getConnection();
        
        int courseId = getCourseId( courseName );
        
        String insertWaitlist = "INSERT INTO waitlist (priority, course_id, student_id ) VALUES (0, " + courseId + ", " + studentId + ")";
        
        PreparedStatement waitlistQuery = currConnection.prepareStatement( insertWaitlist );
        
        waitlistQuery.executeUpdate();
        
    }
    
    
    
    private void refreshCourseListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshCourseListActionPerformed
        
        try 
        {
            getCourseList();
        } 
        catch (Exception ex) 
        {
            Logger.getLogger(enrollmentPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_refreshCourseListActionPerformed

    private void ReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReturnActionPerformed
       this.setVisible( false );
    }//GEN-LAST:event_ReturnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws Exception {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(enrollmentPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(enrollmentPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(enrollmentPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(enrollmentPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                new enrollmentPage().setVisible(true);
            }
            
        });
    }
    
    public void getCourseList() throws Exception
    {
        Connection currConnection = getConnection();
        
        PreparedStatement classList;
        
        String classQuery = "SELECT course.name FROM course";
        
        classList = currConnection.prepareStatement( classQuery );
        
        ResultSet queryResult = classList.executeQuery();
        
        while( queryResult.next() )
        {
            String courseName = queryResult.getString("name");
            if( courseName != null )
            {
                if( !checkIfExists( courseName ) )
                {
                    courseDropDown.addItem( courseName );
                }
            }
            
        }
        
    }
    
    public boolean checkIfExists( String comparison )
    {
        int index;
        int dropDownLength = courseDropDown.getItemCount();
        
        for( index = 0; index < dropDownLength; index++ )
        {
            if( courseDropDown.getItemAt(index).equals( comparison ) )
            {
                return true;
            }
        }
        
        return false;
    }
    
    public static Connection getConnection() throws Exception
    {
        try
        {
            String driver = "com.mysql.cj.jdbc.Driver";
            String url = "jdbc:mysql://127.0.0.1:3306/enrollment?zeroDateTimeBehavior=CONVERT_TO_NULL";
            String username = "root";
            String password = "Anche0397rry@";
            Class.forName( driver );
            Connection currConnection = DriverManager.getConnection( url, username, password );
            System.out.println("Connected to the database....");
            return currConnection;
        }
        catch ( Exception error )
        {
            System.out.println( error );
        }
     
        return null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Return;
    private javax.swing.JComboBox<String> courseDropDown;
    private javax.swing.JButton enrollButton;
    private javax.swing.JLabel firstNameLabel;
    private javax.swing.JTextField firstNameTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JTextField lastNameTextField;
    private javax.swing.JButton refreshCourseList;
    private javax.swing.JTextField studentIdTextField;
    // End of variables declaration//GEN-END:variables
}
